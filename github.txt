## Introduction to Git: Unleashing the Power of Version Control and Command Prompt

Version control systems serve as the backbone of modern software development, enabling developers to track and manage changes to their code effectively. Among the plethora of version control systems available, Git stands out as a prominent choice due to its distributed nature, branching capabilities, and efficient handling of large projects. Watch this video for more

**Understanding the Basics of Git**
Git operates on the principle of creating snapshots or "commits" of your code at different stages, allowing you to revert to previous versions if needed. It introduces the concept of a repository, which acts as a central storehouse for all your project's files and their revision history. 
Git basics
Git is a free and open-source version control system, originally created by Linus Torvalds in 2005. Unlike older centralized version control systems such as SVN and CVS, Git is distributed: every developer has the full history of their code repository locally. This makes the initial clone of the repository slower, but subsequent operations such as commit, blame, diff, merge, and log dramatically faster.
Git also has excellent support for branching, merging, and rewriting repository history, which has led to many innovative and powerful workflows and tools. Pull requests are one such popular tool that allows teams to collaborate on Git branches and efficiently review each other's code. Git is the most widely used version control system in the world today and is considered the modern standard for software development.
**How Git works**
Here is a basic overview of how Git works:
Create a "repository" (project) with a git hosting tool (like Bitbucket)
Copy (or clone) the repository to your local machine
Add a file to your local repo and "commit" (save) the changes
"Push" your changes to your main branch
Make a change to your file with a git hosting tool and commit
"Pull" the changes to your local machine
Create a "branch" (version), make a change, commit the change
Open a "pull request" (propose changes to the main branch)
"Merge" your branch to the main branch
The Power of the Command Prompt
In conjunction with Git, the command prompt serves as a powerful tool for navigating your file system, executing commands, and interacting with Git. Equipped with a range of commands, the command prompt facilitates tasks such as cloning repositories, making commits, pushing changes to remote servers, and resolving conflicts.
By mastering these tools, you will unlock new possibilities for efficient code management, streamlined collaboration, and enhanced productivity. Embrace the power of version control and the command prompt to elevate your software development journey to new heights.
What Is Version Control?
Imagine you have a brand new project. Naturally, you plan to store all related files in a single new directory. As work progresses, these files will change. A lot. Things will get disorganized, even messy, and at some point even completely fubar. At that point, you would want to go back in time to the most recent not-messy, still-working version of your project — if only that were possible!
Well, thanks to git, it is. Version control happens when you install git on your computer. Git is built to create that new project directory, and to keep track of all the changes you make to any and all files you put in that directory. As things progress and you make additions and changes, git takes a “snapshot” of the current version. And that, friends, is version control: make a small change, take a snapshot, make another small change, take a snapshot…And save all of these snapshots in chronological order. You can then use git to step back and forth as 
Collaborating with Git
Easy enough to understand as one person working solo on one project. But envision working with a whole team of people where you all need to share the same project directory. You will make changes to your part of the project — while working locally on your laptop — and your collaborators will be doing the same on their portions of the project on their own machines. How do you share changes to your collaborators, and also have the changes they make appear in your own local working version?  How do you make sure something you are working on doesn’t conflict or crash things other people are working on?
Watch this video for further explanation:
What Is Git? | What Is Git And How To Use It | Learn Git | Git Tutorial | DevOps Tools | Simplilearn






##: Git Commands: Cheat sheet for software engineers

Terminology

Branch:
A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed in Git Basics, the first module of this series. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project.
Centralized workflow:
If your developers are already comfortable with Subversion, the Centralized Workflow lets you experience the benefits of Git without having to adapt to an entirely new process. It also serves as a friendly transition into more Git-oriented workflows.
Feature branch workflow:
The Feature Branch Workflow builds on the Centralized Workflow by encapsulating new features into dedicated branches. This enables the use of pull requests as a means to discuss changes before they’re integrated into the official project.
Forking:
Instead of using a single server-side repository to act as the “central” codebase, forking gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one.
Gitflow workflow: 
The Gitflow Workflow streamlines the release cycle by using isolated branches for feature development, release preparation, and maintenance. Its strict branching model also lends some much needed structure to larger projects.
HEAD
Git’s way of referring to the current snapshot. Internally, the git checkout command simply updates the HEAD to point to either the specified branch or commit. When it points to a branch, Git doesn't complain, but when you check out a commit, it switches into a “detached HEAD” state.
Hook
A script that runs automatically every time a particular event occurs in a Git repository. Hooks let you customize Git’s internal behavior and trigger customizable actions at key points in the development life cycle.
Main
The default development branch. Whenever you create a git repository, a branch named "main" is created, and becomes the active branch.
Pull request
Pull requests are a feature that makes it easier for developers to collaborate using Bitbucket. They provide a user-friendly web interface for discussing proposed changes before integrating them into the official project.
Repository
A collection of commits, and branches and tags to identify commits.
Tag
A reference typically used to mark a particular point in the commit chain. In contrast to a head, a tag is not updated by the commit command.
Working tree
The tree of actual checked out files, normally containing the contents of the HEAD commit's tree and any local changes you've made but haven't yet committed.
Git Command

Top 10 Git Commands | Most Used Git Commands | Git Commands With Examples | Simplilearn
git add
Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.
git branch
This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.
git checkout
In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development.
git clean
Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.
git clone
Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.
git commit
Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.
git commit --amend
Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message.
git config
A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine.
git fetch
Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.
git init
Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.
git log
Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.
git merge
A powerful way to integrate changes from divergent branches. After forking the project history with the git branch, git merge lets you put it back together again.
git pull
Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.
git push
Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset.
git rebase
Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.
git rebase -i
The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way.
git reflog
Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag.
git remote
A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.
git reset
Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.
git revert
Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.
git status
Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s there. 
Note Five: Git Vs. Github: Central Cloudspace for software engineers
Git & GitHub Crash Course For Beginners.
Introduction

GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. You'll create your own Hello World repository and learn GitHub's pull request workflow, a popular way to create and review code.
To continue, you need a GitHub account and Internet access. You don't need to know how to code, use the command line, or install Git (the version control software that GitHub is built on).
Step One: Download git
Choose the right one for your own preferred operating system: Mac OS, Linux or Windows. It will self-install. Don’t worry if it looks like nothing’s happening,
Step Two: Open Terminal
I’m sorry but you’re just going to have to use the command line. So, shut up and shell: Linux users, you already know what to do. For Mac users, it’s Finder -> Applications -> Utilities -> Terminal. Windows users (why are you even here?), you’re going to have to download and install a terminal emulator.
If this step has you frozen in terror because you have absolutely no idea what to do now, or how to do it,  go directly to the amazing Command Line Crash Course and work through that (takes a couple hours and will leave you feeling like a code commando, I promise!).
Step Three: Tell git you exist
Now it is time to configure your name and email. Do this by typing in the following, of course replacing the values with your own name and email.
1
2
3
git config --global user.name 'My_Name'
git config --global user.email 'myEmail@wherever.com'
git config --global color.ui 'auto'


That last line is optional; it tells git to automatically make any output of git commands in the terminal nicely color coded, which is much easier to read and also to understand. The reason we put “–global” in front of each is to avoid typing these config commands the next time we start a git project on our system. So this way, git knows who you are — forever.
Step Four: Create a new directory
Now it’s time to practice setting up a sample project. Set yourself up an empty directory to hold all your glorious, soon-to-exist project files (hint: $mkdir (yourDirectoryNameHere). Then CD into it and type the magic words “git init”:Step Five: Create a new directory
A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets -- anything your project needs. Often, repositories include a README file, a file with information about your project. README files are written in the plain text Markdown language. You can use this cheat sheet to get started with Markdown syntax. GitHub lets you add a README file at the same time you create your new repository. GitHub also offers other common options such as a license file, but you do not have to select any of them now.

Your hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.
In the upper-right corner of any page, select , then click New repository.
In the "Repository name" box, type hello-world.
In the "Description" box, type a short description.
Select whether your repository will be Public or Private.
Select Add a README file.
Click Create repository.
Step Six: Creating a branch
Branching lets you have different versions of a repository at one time.
By default, your repository has one branch named main that is considered to be the definitive branch. You can create additional branches off of main in your repository. You can use branches to experiment and make edits before committing them to main.
When you create a branch off the main branch, you're making a copy, or snapshot, of main as it was at that point in time. If someone else made changes to the main branch while you were working on your branch, you could pull in those updates.


This diagram shows:
The main branch
A new branch called feature
The journey that feature takes before it's merged into main

Have you ever saved different versions of a file? Something like:
story.txt
story-edit.txt
story-edit-reviewed.txt
Branches accomplish similar goals in GitHub repositories.
Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our main (production) branch. When a change is ready, they merge their branch into main.
Click the Code tab of your hello-world repository.

Type a branch name, readme-edits, into the text box.
Click Create branch: readme-edits from main.
Now you have two branches, main and readme-edits. Right now, they look exactly the same. Next you'll add changes to the new branch.

Step Seven: Making and committing changes
When you created a new branch in the previous step, GitHub brought you to the code page for your new readme-edits branch, which is a copy of main.
You can make and save changes to the files in your repository. On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. Commit messages capture the history of your changes so that other contributors can understand what you’ve done and why.
Under the readme-edits branch you created, click the README.md file.
To edit the file, click .
In the editor, write a bit about yourself. Try using different Markdown elements.
Click Commit changes....
In the "Commit changes" box, write a commit message that describes your changes.
Click Commit changes.
These changes will be made only to the README file on your readme-edits branch, so now this branch contains content that's different from main.
Step Eight: Opening a pull request
Now that you have changes in a branch off of main, you can open a pull request.
Pull requests are the heart of collaboration on GitHub. When you open a pull request, you're proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in different colors.

Click the Pull requests tab of your hello-world repository.
Click New pull request
In the Example Comparisons box, select the branch you made, readme-edits, to compare with main (the original).
Look over your changes in the diffs on the Compare page, make sure they're what you want to submit.
Click Create pull request.
Give your pull request a title and write a brief description of your changes. You can include emojis and drag and drop images and gifs.
Optionally, to the right of your title and description, click the  next to Reviewers, Assignees, Labels, Projects, or Milestone to add any of these options to your pull request. You do not need to add any yet, but these options offer different ways to collaborate using pull requests. For more information, see "About pull requests."
Click Create pull request.
Step Nine: Merging your pull request
In this final step, you will merge your readme-edits branch into the main branch. After you merge your pull request, the changes on your readme-edits branch will be incorporated into main.
Sometimes, a pull request may introduce changes to code that conflict with the existing code on main. If there are any conflicts, GitHub will alert you about the conflicting code and prevent merging until the conflicts are resolved. You can make a commit that resolves the conflicts or use comments in the pull request to discuss the conflicts with your team members.
In this walk-through, you should not have any conflicts, so you are ready to merge your branch into the main branch.
At the bottom of the pull request, click Merge pull request to merge the changes into main.
Click Confirm merge. You will receive a message that the request was successfully merged and the request was closed.
Click Delete branch. Now that your pull request is merged and your changes are on main, you can safely delete the readme-edits branch. If you want to make more changes to your project, you can always create a new branch and repeat this process.

